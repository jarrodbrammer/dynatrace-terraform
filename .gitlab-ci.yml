stages:
  - generate
  - plan_apply

variables:
  TF_ROOT_DIR: "apps"

include:
  - local: "ci/child-pipeline.yml"

generate-matrix:
  stage: generate
  script:
    - |
      echo '[' > matrix.json

      if [ -z "$CI_COMMIT_BEFORE_SHA" ]; then
        echo "ðŸŸ¡ No previous commit SHA found. Including all apps/environments..."
        find apps -mindepth 2 -maxdepth 2 -type d | while read -r path; do
          app=$(basename "$(dirname "$path")")
          env=$(basename "$path")
          echo "  { \"APP\": \"$app\", \"ENV\": \"$env\" }," >> matrix.json
        done
      else
        echo "ðŸŸ¢ Changes detected between commits. Generating delta-based matrix..."
        git diff --name-only "$CI_COMMIT_BEFORE_SHA" "$CI_COMMIT_SHA" |
          grep '^apps/' |
          cut -d'/' -f2,3 |
          sort -u |
          while IFS='/' read -r app env; do
            echo "  { \"APP\": \"$app\", \"ENV\": \"$env\" }," >> matrix.json
          done
      fi

      sed -i '$ s/,$//' matrix.json
      echo ']' >> matrix.json

      echo "ðŸ”§ Final matrix:"
      cat matrix.json
  artifacts:
    paths:
      - matrix.json

trigger-child-pipeline:
  stage: trigger
  trigger:
    include: .gitlab/ci-template.yml
    strategy: matrix
    forward:
      artifacts: true
  rules:
    - exists:
        - apps/*

### CHILD PIPELINE ###
stages:
  - init
  - plan
  - apply

.variables:
  TF_ROOT_DIR: "apps"

init:
  stage: init
  script:
    - cd ${TF_ROOT_DIR}/${APP}/${ENV}
    - |
      echo "ðŸŒ± Running Terraform Init for ${APP^^}-${ENV^^}"
      terraform init \
        -backend-config="address=https://gitlab.example.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${APP}_${ENV}" \
        -backend-config="lock_address=https://gitlab.example.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${APP}_${ENV}/lock" \
        -backend-config="unlock_address=https://gitlab.example.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${APP}_${ENV}/lock" \
        -backend-config="username=gitlab-ci-token" \
        -backend-config="password=${CI_JOB_TOKEN}"

plan:
  stage: plan
  script:
    - cd ${TF_ROOT_DIR}/${APP}/${ENV}
    - terraform plan -out=tfplan

apply:
  stage: apply
  script:
    - cd ${TF_ROOT_DIR}/${APP}/${ENV}
    - terraform apply -auto-approve tfplan